# Salesforce Code Quality Manual Test Workflow
#
# Purpose:
# This workflow allows manual testing of the action against Salesforce code files.
# It scans all files (not just changed ones) and is useful for:
# - Testing the action manually
# - Debugging issues
# - Demonstrating functionality
# - Running quality checks on any branch

name: Salesforce Code Quality Manual Test

on:
  workflow_dispatch:
    inputs:
      # üéØ WHAT TO SCAN (Core Configuration)
      config_preset:
        description: 'üéØ What Salesforce components do you want to scan?'
        required: false
        default: 'salesforce-full'
        type: choice
        options:
          - 'salesforce-full'
          - 'salesforce-apex'
          - 'salesforce-lwc'
          - 'salesforce-aura'
          - 'salesforce-field'
          - 'custom'
      scan_path:
        description: 'üìÅ Path to scan (where your Salesforce test files are located)'
        required: true
        default: 'language-tests/salesforce/files/'
        type: string
      file_types_config:
        description: '‚öôÔ∏è Custom file types configuration (JSON) - only used if config_preset is "custom"'
        required: false
        default: ''
        type: string

      # ‚öôÔ∏è HOW TO SCAN (Behavior Settings)
      enable_cache:
        description: 'üöÄ Enable caching for faster subsequent runs'
        required: false
        default: 'true'
        type: boolean
      output_formats:
        description: 'üìä How do you want to see the results?'
        required: true
        default: 'github'
        type: choice
        options:
          - 'github'
          - 'github,json'
          - 'github,html'
          - 'github,text'
          - 'github,json,html'
          - 'github,json,text'
          - 'github,html,text'
          - 'github,json,html,text'
          - 'json'
          - 'html'
          - 'text'

      # üö® QUALITY THRESHOLDS (When to Fail)
      max_critical_violations:
        description: 'üö® Maximum critical violations allowed (security issues, major bugs)'
        required: true
        default: '50'
        type: string
      max_medium_violations:
        description: '‚ö†Ô∏è Maximum medium violations allowed (code quality issues)'
        required: true
        default: '100'
        type: string
      fail_on_issues:
        description: '‚ùå Should the workflow fail if violations exceed thresholds?'
        required: false
        default: 'false'
        type: boolean

jobs:
  code-quality-manual-test:
    name: Manual Test on Salesforce Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      # Set the configuration based on the preset choice
      - name: Set configuration
        id: set-config
        run: |
          case "${{ github.event.inputs.config_preset }}" in
            "salesforce-full")
              CONFIG='[
                {
                  "name": "Classes",
                  "sourcePath": "language-tests/salesforce/files/classes/",
                  "fileExtensions": [".cls", ".cls-meta.xml"],
                  "analyzer": "pmd",
                  "rulesPaths": [
                    "./language-tests/salesforce/rulesets/pmd/apex/ruleset.xml"
                  ]
                },
                {
                  "name": "LWC",
                  "sourcePath": "language-tests/salesforce/files/lwc/",
                  "fileExtensions": [".js"],
                  "analyzer": "eslint",
                  "rulesPaths": [
                    "./language-tests/salesforce/rulesets/eslint/lwc/standard-ruleset.js"
                  ]
                },
                {
                  "name": "Aura",
                  "sourcePath": "language-tests/salesforce/files/aura/",
                  "fileExtensions": [".js"],
                  "analyzer": "eslint",
                  "rulesPaths": [
                    "./language-tests/salesforce/rulesets/eslint/aura/standard-ruleset.js"
                  ]
                },
                {
                  "name": "Fields",
                  "sourcePath": "language-tests/salesforce/files/objects/",
                  "fileExtensions": [".field-meta.xml"],
                  "analyzer": "pmd",
                  "rulesPaths": [
                    "./language-tests/salesforce/rulesets/pmd/xml/field-ruleset.xml"
                  ]
                }
              ]'
              ;;
            "salesforce-apex")
              CONFIG='[
                {
                  "name": "Classes",
                  "sourcePath": "language-tests/salesforce/files/classes/",
                  "fileExtensions": [".cls", ".cls-meta.xml"],
                  "analyzer": "pmd",
                  "rulesPaths": [
                    "./language-tests/salesforce/rulesets/pmd/apex/ruleset.xml"
                  ]
                }
              ]'
              ;;
            "salesforce-lwc")
              CONFIG='[
                {
                  "name": "LWC",
                  "sourcePath": "language-tests/salesforce/files/lwc/",
                  "fileExtensions": [".js"],
                  "analyzer": "eslint",
                  "rulesPaths": [
                    "./language-tests/salesforce/rulesets/eslint/lwc/standard-ruleset.js"
                  ]
                }
              ]'
              ;;
            "salesforce-aura")
              CONFIG='[
                {
                  "name": "Aura",
                  "sourcePath": "language-tests/salesforce/files/aura/",
                  "fileExtensions": [".js"],
                  "analyzer": "eslint",
                  "rulesPaths": [
                    "./language-tests/salesforce/rulesets/eslint/aura/standard-ruleset.js"
                  ]
                }
              ]'
              ;;
            "salesforce-field")
              CONFIG='[
                {
                  "name": "Fields",
                  "sourcePath": "language-tests/salesforce/files/objects/",
                  "fileExtensions": [".field-meta.xml"],
                  "analyzer": "pmd",
                  "rulesPaths": [
                    "./language-tests/salesforce/rulesets/pmd/xml/field-ruleset.xml"
                  ]
                }
              ]'
              ;;
            "custom")
              CONFIG='${{ github.event.inputs.file_types_config }}'
              ;;
            *)
              echo "Unknown preset: ${{ github.event.inputs.config_preset }}"
              exit 1
              ;;
          esac
          
          echo "Selected configuration: ${{ github.event.inputs.config_preset }}"
          echo "CONFIG<<EOF" >> $GITHUB_OUTPUT
          echo "$CONFIG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      # Run the action against Salesforce test files
      - name: Run action on Salesforce test files
        id: code-scan
        uses: ./
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          sourcePath: ${{ github.event.inputs.scan_path }}
          installSalesforcePlugins: true
          check-name: "Salesforce Manual Quality Check"
          
          # Manual test settings
          scanChangedFilesOnly: false # Scan all files (no PR context)
          failOnQualityIssues: ${{ github.event.inputs.fail_on_issues }}
          enableScanCache: ${{ github.event.inputs.enable_cache }}
          outputFormats: ${{ github.event.inputs.output_formats }}
          
          # Configurable thresholds
          maxCriticalViolations: ${{ github.event.inputs.max_critical_violations }}
          maxMediumViolations: ${{ github.event.inputs.max_medium_violations }}
          
          # Use the configuration from the preset
          file-types-config: ${{ steps.set-config.outputs.CONFIG }}

      # Show results summary
      - name: Show results summary
        run: |
          echo "üéØ Configuration used: ${{ github.event.inputs.config_preset }}"
          echo "üìÅ Scan scope: All files in ${{ github.event.inputs.scan_path }}"
          echo "üìä Total violations: ${{ steps.code-scan.outputs.total-violations }}"
          echo "üö® Critical violations: ${{ steps.code-scan.outputs.critical-violations }}"
          echo "‚ö†Ô∏è Medium violations: ${{ steps.code-scan.outputs.medium-violations }}"
          echo "‚ùó Action required: ${{ steps.code-scan.outputs.action-required }}"
