# Salesforce Code Quality Test Workflow
#
# Purpose:
# This workflow tests the action against sample Salesforce code files using custom rulesets.
# It uses test files from the language-tests/salesforce/files directory and 
# rulesets from the language-tests/salesforce/rulesets directory.
#
# The test files contain intentional code quality issues that should be detected by the action.

name: Salesforce Code Quality Test

on:
  pull_request:
    types: [opened, reopened, synchronize]
    paths:
      - 'language-tests/salesforce/files/**'

jobs:
  code-quality-test:
    name: Run Action on Salesforce Test Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      # Run the action against the test Salesforce files
      - name: Run action on Salesforce test files
        id: code-scan
        uses: ./
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          sourcePath: "language-tests/salesforce/files/"
          installSalesforcePlugins: true
          check-name: "Salesforce Quality Gate"
          
          # Differential Enforcement Settings (our current defaults - explicitly set for clarity)
          strictNewFiles: true                         # Any violation in new files fails the check
          maxViolationsForModifiedFiles: 10            # Allow up to 10 violations in modified files
          maxCriticalViolationsForModifiedFiles: 0     # Don't allow any critical violations in modified files
          failOnQualityIssues: true                    # Fail the workflow if quality thresholds are exceeded
          
          # File scanning strategy
          scanChangedFilesOnly: true                   # Only scan changed files (enables differential enforcement)
          
          file-types-config: |
            [
              {
                "name": "Classes",
                "sourcePath": "language-tests/salesforce/files/classes/",
                "fileExtensions": [".cls", ".cls-meta.xml"],
                "analyzer": "pmd",
                "rulesPaths": [
                  "./language-tests/salesforce/rulesets/pmd/apex/ruleset.xml"
                ]
              },
              {
                "name": "LWC",
                "sourcePath": "language-tests/salesforce/files/lwc/",
                "fileExtensions": [".js"],
                "analyzer": "eslint",
                "rulesPaths": [
                  "./language-tests/salesforce/rulesets/eslint/lwc/standard-ruleset.js"
                ]
              },
              {
                "name": "Aura",
                "sourcePath": "language-tests/salesforce/files/aura/",
                "fileExtensions": [".js"],
                "analyzer": "eslint",
                "rulesPaths": [
                  "./language-tests/salesforce/rulesets/eslint/aura/standard-ruleset.js"
                ]
              },
              {
                "name": "Fields",
                "sourcePath": "language-tests/salesforce/files/objects/",
                "fileExtensions": [".field-meta.xml"],
                "analyzer": "pmd",
                "rulesPaths": [
                  "./language-tests/salesforce/rulesets/pmd/xml/field-ruleset.xml"
                ]
              }
            ]

      # Check if action is required based on violations
      - name: Check if action required
        if: always()
        run: echo "Violations require developer action! '${{ steps.code-scan.outputs.action-required }}'"

      - name: Debug outputs  
        if: always()
        run: |
          echo "Action required: '${{ steps.code-scan.outputs.action-required }}'"
