# TypeScript Code Quality Manual Test Workflow
#
# Purpose:
# This workflow allows manual testing of the action against TypeScript code files.
# It scans all files (not just changed ones) and is useful for:
# - Testing the action manually
# - Debugging issues
# - Demonstrating functionality
# - Running quality checks on any branch

name: TypeScript Code Quality Manual Test

on:
  workflow_dispatch:
    inputs:
      fail_on_issues:
        description: 'Fail workflow if quality issues are found'
        required: false
        default: 'false'
        type: boolean
      scan_path:
        description: 'Path to scan'
        required: true
        default: 'language-tests/typescript/files/'
        type: string
      max_critical_violations:
        description: 'Maximum critical violations allowed'
        required: true
        default: '50'
        type: string
      max_medium_violations:
        description: 'Maximum medium violations allowed'
        required: true
        default: '100'
        type: string
      output_formats:
        description: 'Output formats'
        required: true
        default: 'github'
        type: choice
        options:
          - 'github'
          - 'github,json'
          - 'github,html'
          - 'github,text'
          - 'github,json,html'
          - 'github,json,text'
          - 'github,html,text'
          - 'github,json,html,text'
          - 'json'
          - 'html'
          - 'text'
      enable_cache:
        description: 'Enable scan caching for faster runs'
        required: false
        default: 'true'
        type: boolean
      config_preset:
        description: 'Choose a predefined configuration'
        required: false
        default: 'typescript-full'
        type: choice
        options:
          - 'typescript-full'
          - 'typescript'
          - 'react'
          - 'custom'
      file_types_config:
        description: 'Custom file types configuration (JSON) - only used if config_preset is "custom"'
        required: false
        default: ''
        type: string

jobs:
  code-quality-manual-test:
    name: Manual Test on TypeScript Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      # Set the configuration based on the preset choice
      - name: Set configuration
        id: set-config
        run: |
          case "${{ github.event.inputs.config_preset }}" in
            "typescript-full")
              CONFIG='[
                {
                  "name": "TypeScript",
                  "sourcePath": "language-tests/typescript/files/src/",
                  "fileExtensions": [".ts"],
                  "analyzer": "eslint",
                  "rulesPaths": [
                    "./language-tests/typescript/rulesets/eslint/standard-ruleset.js"
                  ]
                },
                {
                  "name": "TypeScript React",
                  "sourcePath": "language-tests/typescript/files/components/",
                  "fileExtensions": [".tsx"],
                  "analyzer": "eslint",
                  "rulesPaths": [
                    "./language-tests/typescript/rulesets/eslint/standard-ruleset.js"
                  ]
                }
              ]'
              ;;
            "typescript")
              CONFIG='[
                {
                  "name": "TypeScript",
                  "sourcePath": "language-tests/typescript/files/src/",
                  "fileExtensions": [".ts"],
                  "analyzer": "eslint",
                  "rulesPaths": [
                    "./language-tests/typescript/rulesets/eslint/standard-ruleset.js"
                  ]
                }
              ]'
              ;;
            "react")
              CONFIG='[
                {
                  "name": "TypeScript React",
                  "sourcePath": "language-tests/typescript/files/components/",
                  "fileExtensions": [".tsx"],
                  "analyzer": "eslint",
                  "rulesPaths": [
                    "./language-tests/typescript/rulesets/eslint/standard-ruleset.js"
                  ]
                }
              ]'
              ;;
            "custom")
              CONFIG='${{ github.event.inputs.file_types_config }}'
              ;;
            *)
              echo "Unknown preset: ${{ github.event.inputs.config_preset }}"
              exit 1
              ;;
          esac
          
          echo "Selected configuration: ${{ github.event.inputs.config_preset }}"
          echo "CONFIG<<EOF" >> $GITHUB_OUTPUT
          echo "$CONFIG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      # Run the action against TypeScript test files
      - name: Run action on TypeScript test files
        id: code-scan
        uses: ./
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          sourcePath: ${{ github.event.inputs.scan_path }}
          installTypeScriptPlugins: true
          check-name: "TypeScript Manual Quality Check"
          
          # Manual test settings
          failOnQualityIssues: ${{ github.event.inputs.fail_on_issues }}
          enableScanCache: ${{ github.event.inputs.enable_cache }}
          outputFormats: ${{ github.event.inputs.output_formats }}
          
          # Configurable thresholds
          maxCriticalViolations: ${{ github.event.inputs.max_critical_violations }}
          maxMediumViolations: ${{ github.event.inputs.max_medium_violations }}
          
          # Use the configuration from the preset
          file-types-config: ${{ steps.set-config.outputs.CONFIG }}

      # Show results summary
      - name: Show results summary
        run: |
          echo "Configuration used: ${{ github.event.inputs.config_preset }}"
          echo "Scan scope: All files in ${{ github.event.inputs.scan_path }}"
          echo "Total violations: ${{ steps.code-scan.outputs.total-violations }}"
          echo "Critical violations: ${{ steps.code-scan.outputs.critical-violations }}"
          echo "Medium violations: ${{ steps.code-scan.outputs.medium-violations }}"
          echo "Action required: ${{ steps.code-scan.outputs.action-required }}"
